using DEPI_Donation.Data;
using DEPI_Donation.Models;
using DEPI_Donation.Models.ModelsBL;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace DEPI_Donation.Controllers
{
    public class NotificationsController : Controller
    {
        private readonly AppDbcontext _context;
        private readonly NotificationBL _notificationBL;

        public NotificationsController(AppDbcontext context)
        {
            _context = context;
            _notificationBL = new NotificationBL(context);
        }

        // GET: Notifications/Index
        public IActionResult Index()
        {
            var notifications = _context.Notifications.ToList();
            return View(notifications);
        }

        // GET: Notifications/Create
        public IActionResult Create()
        {
            return View();
        }

        // POST: Notifications/Create
        [HttpPost]
        public JsonResult Create(Notification newNotification)
        {
            if (!ModelState.IsValid)
            {
                return Json(new { success = false, message = "Invalid data." });
            }

            try
            {
                // Ensure we don't set NotificationId, it's auto-generated by the DB
                newNotification.CreatedAt = DateTime.Now;
                _context.Notifications.Add(newNotification);
                _context.SaveChanges();

                return Json(new { success = true });
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = ex.Message });
            }
        }

        // GET: Notifications/Edit/5
        public IActionResult Edit(int id)
        {
            var notification = _context.Notifications.FirstOrDefault(n => n.NotificationId == id);
            if (notification == null)
            {
                return NotFound();
            }
            return View(notification);
        }

        // POST: Notifications/Edit/5
        [HttpPost]
        public JsonResult Edit(int id, Notification updatedNotification)
        {
            if (id != updatedNotification.NotificationId)
            {
                return Json(new { success = false, message = "Invalid notification ID." });
            }

            var notification = _context.Notifications.FirstOrDefault(n => n.NotificationId == id);
            if (notification == null)
            {
                return Json(new { success = false, message = "Notification not found." });
            }

            notification.Title = updatedNotification.Title;
            notification.Description = updatedNotification.Description;

            try
            {
                _context.SaveChanges();
                return Json(new { success = true });
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = ex.Message });
            }
        }

        // POST: Notifications/Delete/5
        [HttpPost]
        public JsonResult Delete(int id)
        {
            try
            {
                var notification = _context.Notifications.FirstOrDefault(n => n.NotificationId == id);
                if (notification == null)
                {
                    return Json(new { success = false, message = "Notification not found." });
                }

                // Deleting any associated DonorNotifications if needed
                var donorNotifications = _context.DonorNotifications.Where(dn => dn.NotificationId == id).ToList();
                if (donorNotifications.Any())
                {
                    _context.DonorNotifications.RemoveRange(donorNotifications);
                }

                _context.Notifications.Remove(notification);
                _context.SaveChanges();

                return Json(new { success = true });
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = ex.Message });
            }
        }
    }
}
